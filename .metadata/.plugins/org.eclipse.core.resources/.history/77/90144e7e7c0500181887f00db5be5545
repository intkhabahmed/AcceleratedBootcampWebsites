package com.cg.abc.service;

import java.sql.SQLException;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cg.abc.dao.AbcDAO;
import com.cg.abc.entity.Message;
import com.cg.abc.entity.Proposal;
import com.cg.abc.entity.Query;
import com.cg.abc.entity.User;
import com.cg.abc.exceptions.ServiceDownException;
import com.cg.abc.exceptions.UserNotFoundException;

@Service
@Transactional
public class AbcServicesImpl implements AbcServices {

	@Autowired
	private AbcDAO abcDAO;

	@Override
	public User ValidateLogin(String username, String password)
			throws ServiceDownException, UserNotFoundException {
		List<User> users;
		try {
			users = abcDAO.validateLogin(username, password);
			if (users.size() == 0) {
				throw new UserNotFoundException(
						"Username or Password is incorrect");
			}

		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailble! Try Again Later");
		}
		return users.get(0);
	}

	@Override
	public int uploadFile(Proposal proposalFile) throws ServiceDownException {
		Proposal returnedProposalFile;
		try {
			returnedProposalFile = abcDAO.uploadFile(proposalFile);
		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
		return returnedProposalFile.getProposalId();
	}

	@Override
	public Proposal getFile(int id) {
		return abcDAO.getFile(id);
	}

	@Override
	public void askQuery(Query message) throws ServiceDownException {
		try {
			abcDAO.askQuery(message);
		} catch (SQLException sqlException) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
	}

	@Override
	public void replyQuery(int queryId, String reply)
			throws ServiceDownException {
		try {
			abcDAO.replyQuery(queryId, reply);
		} catch (SQLException sqlException) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}

	}

	@Override
	public List<Proposal> getProposals() throws ServiceDownException {
		try {
			List<Proposal> proposals = abcDAO.getProposals();
			if (proposals.size() == 0) {
				return null;
			}
			return proposals;
		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
	}

	@Override
	public List<Query> getQueries() throws ServiceDownException {
		try {
			List<Query> queries = abcDAO.getQueries();
			if (queries.size() == 0) {
				return null;
			}
			return queries;
		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
	}

	@Override
	public Proposal getProposal(String teamName) throws ServiceDownException {
		List<Proposal> proposals;
		try {
			proposals = abcDAO.getProposal(teamName);
			if (proposals.size() == 0) {
				return null;
			}

		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailble! Try Again Later");
		}
		return proposals.get(0);
	}

	@Override
	public void updateProposal(Proposal proposalFile)
			throws ServiceDownException {
		try {
			abcDAO.updateProposal(proposalFile);
		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
	}

	@Override
	public void sendMessage(Message message) throws ServiceDownException {
		try {
			abcDAO.sendMessage(message);
		} catch (SQLException sqlException) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}

	}

	@Override
	public List<Message> getMessages() throws ServiceDownException {
		try {
			List<Message> messages = abcDAO.getMessages();
			if (messages.size() == 0) {
				return null;
			}
			return messages;
		} catch (SQLException e) {
			throw new ServiceDownException(
					"Service unavailable right now, Try Again Later!");
		}
	}

}
