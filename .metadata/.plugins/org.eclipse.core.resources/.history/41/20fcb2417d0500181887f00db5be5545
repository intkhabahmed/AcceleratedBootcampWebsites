package com.cg.abc.dao;

import java.sql.SQLException;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.cg.qh.entity.Message;
import com.cg.qh.entity.Proposal;
import com.cg.qh.entity.Query;
import com.cg.qh.entity.User;

@Repository
public class AbcDAOImpl implements AbcDAO {
	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public List<User> validateLogin(String username, String password)
			throws SQLException {
		TypedQuery<User> query = entityManager
				.createQuery(
						"SELECT user FROM User user WHERE user.username=:username AND user.password=:password",
						User.class);
		query.setParameter("username", username);
		query.setParameter("password", password);
		return query.getResultList();
	}

	@Override
	public Proposal uploadFile(Proposal proposal) throws SQLException {
		entityManager.persist(proposal);
		return proposal;
	}

	@Override
	public Proposal getFile(int proposalId) {
		return entityManager.find(Proposal.class, proposalId);
	}

	@Override
	public void askQuery(Query query) throws SQLException {
		entityManager.persist(query);
	}

	@Override
	public void replyQuery(int queryId, String reply) throws SQLException {
		Query query = entityManager.find(Query.class, queryId);
		query.setReply(reply);
		entityManager.merge(query);
	}

	@Override
	public List<Proposal> getProposals() throws SQLException {
		TypedQuery<Proposal> query = entityManager
				.createQuery(
						"SELECT proposal FROM Proposal proposal WHERE proposal.companyName='BeneesFradia' ORDER BY proposal.proposalDate DESC",
						Proposal.class);
		return query.getResultList();
	}

	@Override
	public List<Query> getQueries() throws SQLException {
		TypedQuery<Query> query = entityManager
				.createQuery(
						"SELECT query FROM Query query WHERE query.receiver='BeneesFradia' ORDER BY query.queryDate DESC",
						Query.class);
		return query.getResultList();
	}

	@Override
	public List<Proposal> getProposal(String teamName) throws SQLException {
		TypedQuery<Proposal> query = entityManager
				.createQuery(
						"SELECT proposal FROM Proposal proposal WHERE proposal.companyName='BeneesFradia' AND  proposal.teamName=:teamName",
						Proposal.class);
		query.setParameter("teamName", teamName);
		return query.getResultList();
	}

	@Override
	public void updateProposal(Proposal proposalFile) throws SQLException {
		entityManager.merge(proposalFile);

	}

	@Override
	public void sendMessage(Message message) throws SQLException {
		entityManager.persist(message);
	}

	@Override
	public List<Message> getMessages() throws SQLException {
		TypedQuery<Message> query = entityManager
				.createQuery(
						"SELECT message FROM Message message WHERE message.sender='BeneesFradia' ORDER BY message.messageDate DESC",
						Message.class);
		return query.getResultList();
	}

}